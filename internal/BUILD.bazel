load("@io_bazel_rules_go//tests:bazel_tests.bzl", "bazel_test")

_REPOSITORY_RULES_TEST_WORKSPACE = """
load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies", "go_register_toolchains")
go_rules_dependencies()
go_register_toolchains()

# TODO(jayconrod): fix bazel_test so this isn't necessary
register_toolchains(
    "@go_sdk//:go_darwin_amd64",
    "@go_sdk//:go_linux_amd64",
    "@go_sdk//:go_windows_amd64",
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
gazelle_dependencies()

load("@bazel_gazelle//:deps.bzl", "go_repository", "git_repository", "http_archive")

go_repository(
    name = "errors_go_git",
    importpath = "github.com/pkg/errors",
    commit = "30136e27e2ac8d167177e8a583aa4c3fea5be833",
    patches = ["@bazel_gazelle//internal:repository_rules_test_errors.patch"],
    patch_args = ["-p1"],
)

go_repository(
    name = "errors_go_mod",
    importpath = "github.com/pkg/errors",
    version = "v0.8.1",
    sum ="h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
)
"""

bazel_test(
    name = "repository_rules_test",
    command = "build",
    externals = ["@bazel_gazelle//:WORKSPACE"],
    extra_files = ["repository_rules_test_errors.patch"],
    targets = [
        "@errors_go_git//:errors",
        "@errors_go_mod//:go_default_library",
    ],
    workspace = _REPOSITORY_RULES_TEST_WORKSPACE,
)

# TODO(jayconrod): test fetch_repo error cases.

exports_files(
    [
        "gazelle.bash.in",
        "list_repository_tools_srcs.go",
    ],
    visibility = ["//visibility:public"],
)
